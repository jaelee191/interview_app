require 'net/http'
require 'json'

class DeepAnalysisService
  OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions'
  
  def initialize
    @api_key = ENV['OPENAI_API_KEY']
    @model = 'gpt-5' # GPT-5 모델 사용
  end
  
  def perform_deep_analysis(content, company_name, position, user_profile = nil)
    return { error: "API 키가 설정되지 않았습니다" } unless @api_key
    
    # 9가지 전문 분석 모듈 실행
    analyses = {
      quantitative_score: quantitative_evaluation(content, company_name, position),
      competency_matrix: analyze_competency_matrix(content, position),
      star_analysis: analyze_star_framework(content),
      experience_assets: analyze_experience_assets(content, company_name),
      sentence_impact: analyze_sentence_impact(content),
      keyword_intelligence: analyze_keywords(content, company_name, position),
      risk_diagnosis: diagnose_risks(content),
      differentiation: analyze_differentiation(content, position),
      pass_prediction: predict_pass_rate(content, company_name, position)
    }
    
    # 종합 분석 보고서 생성
    comprehensive_report = generate_comprehensive_report(analyses, content, company_name, position)
    
    {
      success: true,
      analyses: analyses,
      comprehensive_report: comprehensive_report,
      visualization_data: prepare_visualization_data(analyses)
    }
  rescue StandardError => e
    Rails.logger.error "심층 분석 오류: #{e.message}"
    { error: "분석 중 오류가 발생했습니다: #{e.message}" }
  end
  
  private
  
  # 1. 100점 정량 평가 시스템
  def quantitative_evaluation(content, company_name, position)
    prompt = <<~PROMPT
      당신은 20년 경력의 채용 전문가입니다. 자기소개서를 100점 만점으로 정량 평가해주세요.
      
      **평가 기준 (각 20점)**
      1. 직무 적합성 (0-20점)
      2. 구체성과 신뢰성 (0-20점)
      3. 논리성과 구조 (0-20점)
      4. 차별화와 독창성 (0-20점)
      5. 표현력과 문장력 (0-20점)
      
      **출력 형식 (JSON):**
      {
        "total_score": 85,
        "categories": {
          "job_fit": {
            "score": 17,
            "feedback": "직무 관련 경험이 풍부하나 최신 기술 트렌드 언급 부족"
          },
          "specificity": {
            "score": 18,
            "feedback": "구체적 수치와 성과 제시 우수"
          },
          "logic": {
            "score": 16,
            "feedback": "전반적 논리 흐름은 좋으나 일부 단락 연결 개선 필요"
          },
          "differentiation": {
            "score": 15,
            "feedback": "독창적 관점 부족, 일반적인 표현 많음"
          },
          "expression": {
            "score": 19,
            "feedback": "문장력 우수, 전문 용어 적절히 사용"
          }
        },
        "grade": "B+",
        "percentile": "상위 15%",
        "improvement_priority": ["차별화 전략", "최신 트렌드 반영", "스토리텔링 강화"]
      }
      
      지원 기업: #{company_name}
      지원 직무: #{position}
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "채용 평가 전문가", 2000)
    parse_json_response(response)
  end
  
  # 2. 핵심 역량 매트릭스 (5-star rating)
  def analyze_competency_matrix(content, position)
    prompt = <<~PROMPT
      자기소개서에서 드러나는 핵심 역량을 5점 척도로 평가해주세요.
      
      **평가할 역량 카테고리:**
      - 기술 역량 (Technical Skills)
      - 소프트 스킬 (Soft Skills)
      - 리더십 (Leadership)
      - 문제해결 (Problem Solving)
      - 협업능력 (Collaboration)
      - 창의성 (Creativity)
      - 성장가능성 (Growth Potential)
      
      **출력 형식 (JSON):**
      {
        "competencies": {
          "technical_skills": {
            "rating": 4.5,
            "evidence": ["Python 프로젝트 3년", "AWS 인증 보유"],
            "missing": ["최신 AI/ML 경험"]
          },
          "soft_skills": {
            "rating": 4.0,
            "evidence": ["팀 프로젝트 리딩", "고객 커뮤니케이션"],
            "missing": ["갈등 관리 사례"]
          },
          "leadership": {
            "rating": 3.5,
            "evidence": ["동아리 회장 경험"],
            "missing": ["대규모 팀 리딩"]
          },
          "problem_solving": {
            "rating": 4.8,
            "evidence": ["복잡한 버그 해결", "프로세스 개선"],
            "missing": []
          },
          "collaboration": {
            "rating": 4.2,
            "evidence": ["크로스팀 협업", "멘토링 경험"],
            "missing": ["글로벌 협업"]
          },
          "creativity": {
            "rating": 3.8,
            "evidence": ["새로운 솔루션 제안"],
            "missing": ["혁신적 프로젝트"]
          },
          "growth_potential": {
            "rating": 4.6,
            "evidence": ["지속적 학습", "자격증 취득"],
            "missing": []
          }
        },
        "overall_rating": 4.2,
        "strongest_competency": "problem_solving",
        "weakest_competency": "leadership",
        "recommendations": ["리더십 경험 보강", "창의적 프로젝트 수행"]
      }
      
      지원 직무: #{position}
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "역량 평가 전문가", 2000)
    parse_json_response(response)
  end
  
  # 3. STAR 분석 (Situation-Task-Action-Result)
  def analyze_star_framework(content)
    prompt = <<~PROMPT
      자기소개서의 각 경험을 STAR 프레임워크로 분석해주세요.
      
      **STAR Framework:**
      - Situation: 상황 설명의 명확성
      - Task: 과제/목표의 구체성
      - Action: 행동/해결과정의 상세함
      - Result: 결과/성과의 정량화
      
      **출력 형식 (JSON):**
      {
        "star_analyses": [
          {
            "experience": "인턴십 프로젝트",
            "situation": {
              "quality": "excellent",
              "score": 9,
              "content": "스타트업의 급격한 성장으로 인한 시스템 과부하"
            },
            "task": {
              "quality": "good",
              "score": 7,
              "content": "서버 안정화 및 성능 개선"
            },
            "action": {
              "quality": "excellent",
              "score": 9,
              "content": "마이크로서비스 아키텍처 도입, 캐싱 전략 수립"
            },
            "result": {
              "quality": "good",
              "score": 8,
              "content": "응답속도 50% 개선, 서버 비용 30% 절감"
            },
            "total_score": 33,
            "improvement": "Task 부분에 더 구체적인 목표 수치 제시 필요"
          }
        ],
        "overall_star_score": 85,
        "missing_elements": ["일부 경험에 Result 누락", "Action의 구체적 방법론 부족"],
        "strong_points": ["정량적 성과 제시", "상황 설명 명확"]
      }
      
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "STAR 분석 전문가", 2500)
    parse_json_response(response)
  end
  
  # 4. 경험 자산 분석
  def analyze_experience_assets(content, company_name)
    prompt = <<~PROMPT
      지원자의 경험을 자산 가치로 분석해주세요.
      
      **경험 자산 카테고리:**
      - 핵심 경험 (Core Experience): 직무 직결 경험
      - 전이 가능 경험 (Transferable): 타 분야 활용 가능
      - 잠재 경험 (Potential): 미래 성장 가능성
      - 특수 경험 (Unique): 차별화된 독특한 경험
      
      **출력 형식 (JSON):**
      {
        "experience_assets": {
          "core_experiences": [
            {
              "experience": "백엔드 개발 3년",
              "value": "high",
              "relevance": 95,
              "application": "즉시 실무 투입 가능"
            }
          ],
          "transferable_experiences": [
            {
              "experience": "학생회 재무 담당",
              "value": "medium",
              "relevance": 60,
              "application": "예산 관리 및 의사결정"
            }
          ],
          "potential_experiences": [
            {
              "experience": "오픈소스 기여",
              "value": "high",
              "relevance": 80,
              "application": "글로벌 협업 및 코드 품질"
            }
          ],
          "unique_experiences": [
            {
              "experience": "AI 스타트업 창업 경험",
              "value": "very_high",
              "relevance": 85,
              "application": "사업 전반 이해 및 리더십"
            }
          ]
        },
        "total_asset_value": "8.5/10",
        "company_fit": "#{company_name}의 혁신 문화와 높은 적합도",
        "missing_assets": ["대기업 경험", "글로벌 프로젝트"],
        "leverage_strategy": "창업 경험을 통한 ownership 강조"
      }
      
      기업: #{company_name}
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "경험 자산 평가 전문가", 2000)
    parse_json_response(response)
  end
  
  # 5. 문장 임팩트 분석
  def analyze_sentence_impact(content)
    prompt = <<~PROMPT
      자기소개서의 문장별 임팩트를 분석해주세요.
      
      **평가 기준:**
      - 첫 문장 훅(Hook): 관심 유발도
      - 핵심 문장: 기억에 남는 정도
      - 전환 문장: 논리적 연결성
      - 마무리 문장: 여운과 인상
      
      **출력 형식 (JSON):**
      {
        "sentence_analysis": {
          "opening_impact": {
            "sentence": "실패를 두려워하지 않는 도전 정신으로...",
            "impact_score": 6,
            "feedback": "진부한 표현, 구체적 사례로 시작 권장",
            "suggestion": "'3번의 창업 실패가 저를 더 강하게 만들었습니다'로 변경"
          },
          "power_sentences": [
            {
              "sentence": "고객 이탈률을 3개월만에 40%에서 15%로 감소시켰습니다",
              "impact_score": 9,
              "reason": "구체적 수치와 단기간 성과"
            }
          ],
          "weak_sentences": [
            {
              "sentence": "열심히 노력하겠습니다",
              "impact_score": 2,
              "reason": "추상적이고 진부함",
              "suggestion": "구체적 실행 계획 제시"
            }
          ],
          "closing_impact": {
            "sentence": "귀사와 함께 성장하고 싶습니다",
            "impact_score": 5,
            "feedback": "평범한 마무리",
            "suggestion": "기업의 비전과 개인 목표 연결"
          }
        },
        "overall_impact": 6.8,
        "memorable_quotient": "중간",
        "improvement_areas": ["오프닝 강화", "클리셰 제거", "구체성 추가"]
      }
      
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "문장 분석 전문가", 2000)
    parse_json_response(response)
  end
  
  # 6. 키워드 인텔리전스
  def analyze_keywords(content, company_name, position)
    prompt = <<~PROMPT
      자기소개서의 키워드를 전략적으로 분석해주세요.
      
      **분석 항목:**
      - 직무 키워드 매칭도
      - 기업 핵심가치 반영도
      - 트렌드 키워드 활용
      - 차별화 키워드
      
      **출력 형식 (JSON):**
      {
        "keyword_analysis": {
          "job_keywords": {
            "matched": ["개발", "프로그래밍", "문제해결", "협업"],
            "missing": ["애자일", "DevOps", "클라우드", "CI/CD"],
            "match_rate": 65
          },
          "company_values": {
            "matched": ["혁신", "도전"],
            "missing": ["정직", "고객중심"],
            "match_rate": 50
          },
          "trend_keywords": {
            "included": ["AI", "자동화"],
            "recommended": ["지속가능성", "ESG", "디지털전환"],
            "trend_score": 60
          },
          "differentiation_keywords": {
            "unique": ["블록체인 특허", "해커톤 우승"],
            "overused": ["성실", "책임감", "열정"],
            "uniqueness_score": 70
          },
          "keyword_density": {
            "optimal_range": "2-4%",
            "current": "3.2%",
            "status": "적정"
          }
        },
        "overall_keyword_score": 72,
        "seo_optimization": "good",
        "recommendations": [
          "기업 핵심가치 키워드 보강",
          "최신 기술 트렌드 반영",
          "진부한 표현 교체"
        ]
      }
      
      기업: #{company_name}
      직무: #{position}
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "키워드 전략 전문가", 2000)
    parse_json_response(response)
  end
  
  # 7. 리스크 진단 (Red/Yellow Flags)
  def diagnose_risks(content)
    prompt = <<~PROMPT
      자기소개서의 잠재적 리스크를 진단해주세요.
      
      **리스크 레벨:**
      - 🔴 Red Flag: 즉시 수정 필요
      - 🟡 Yellow Flag: 개선 권장
      - 🟢 Green: 문제없음
      
      **출력 형식 (JSON):**
      {
        "risk_diagnosis": {
          "red_flags": [
            {
              "issue": "과장된 표현",
              "location": "2번째 단락",
              "example": "'업계 최고 수준의 실력'",
              "risk": "신뢰성 훼손",
              "solution": "객관적 지표로 대체"
            }
          ],
          "yellow_flags": [
            {
              "issue": "모호한 성과",
              "location": "프로젝트 설명",
              "example": "'많은 개선'",
              "risk": "구체성 부족",
              "solution": "정량적 수치 제시"
            }
          ],
          "green_signals": [
            {
              "strength": "일관된 스토리라인",
              "impact": "신뢰도 향상"
            }
          ],
          "integrity_check": {
            "consistency": 85,
            "credibility": 78,
            "authenticity": 82
          }
        },
        "overall_risk_level": "medium",
        "critical_issues": 2,
        "minor_issues": 5,
        "risk_score": 65,
        "priority_fixes": ["과장 표현 제거", "수치 구체화", "증빙 가능성 확보"]
      }
      
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "리스크 평가 전문가", 2000)
    parse_json_response(response)
  end
  
  # 8. 차별화 전략
  def analyze_differentiation(content, position)
    prompt = <<~PROMPT
      자기소개서의 차별화 요소를 분석하고 전략을 제시해주세요.
      
      **차별화 분석:**
      - 현재 차별점
      - 경쟁자 대비 우위
      - 잠재 차별화 요소
      - 포지셔닝 전략
      
      **출력 형식 (JSON):**
      {
        "differentiation_analysis": {
          "current_differentiators": [
            {
              "factor": "창업 경험",
              "uniqueness": "high",
              "relevance": "medium",
              "impact": 8
            }
          ],
          "competitive_advantages": [
            {
              "advantage": "기술+비즈니스 융합 역량",
              "vs_competitors": "상위 10%",
              "evidence": "개발자이면서 사업 경험"
            }
          ],
          "hidden_differentiators": [
            {
              "potential": "오픈소스 기여도",
              "current_emphasis": "low",
              "recommended_emphasis": "high",
              "how_to_leverage": "GitHub 프로필 강조"
            }
          ],
          "positioning_strategy": {
            "current_position": "일반 개발자",
            "recommended_position": "기술 창업가형 개발자",
            "key_message": "비즈니스를 이해하는 개발자",
            "supporting_points": ["창업 경험", "고객 관점", "제품 사고"]
          },
          "differentiation_score": 73,
          "uniqueness_index": "상위 20%"
        },
        "recommendations": [
          "창업 스토리 전면 배치",
          "기술-비즈니스 시너지 강조",
          "구체적 임팩트 수치화"
        ]
      }
      
      직무: #{position}
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "차별화 전략 전문가", 2000)
    parse_json_response(response)
  end
  
  # 9. 합격 가능성 예측
  def predict_pass_rate(content, company_name, position)
    prompt = <<~PROMPT
      자기소개서 기반 합격 가능성을 예측해주세요.
      
      **예측 모델 고려사항:**
      - 직무 적합도
      - 기업 문화 적합도
      - 경쟁력 수준
      - 차별화 정도
      - 리스크 요인
      
      **출력 형식 (JSON):**
      {
        "pass_prediction": {
          "overall_probability": 68,
          "confidence_level": "medium",
          "breakdown": {
            "document_quality": 75,
            "job_fit": 70,
            "company_fit": 65,
            "competitiveness": 60,
            "differentiation": 70
          },
          "competitive_position": {
            "estimated_rank": "상위 30%",
            "total_applicants": "예상 200명",
            "your_position": "60위권"
          },
          "success_factors": [
            "강력한 프로젝트 경험",
            "정량적 성과 제시",
            "성장 가능성"
          ],
          "risk_factors": [
            "대기업 경험 부족",
            "직무 경력 짧음",
            "차별화 부족"
          ],
          "scenario_analysis": {
            "best_case": {
              "probability": 85,
              "condition": "면접 우수 수행시"
            },
            "likely_case": {
              "probability": 68,
              "condition": "현재 상태 유지시"
            },
            "worst_case": {
              "probability": 40,
              "condition": "경쟁자 수준 높을시"
            }
          },
          "improvement_impact": {
            "if_improved": 82,
            "key_improvements": ["차별화 강화", "기업 연구 심화"],
            "expected_lift": "+14%"
          }
        },
        "recommendation": "서류 합격 가능성 있으나 개선 필요",
        "action_items": ["차별화 포인트 강화", "기업 맞춤 수정", "리스크 요인 보완"]
      }
      
      기업: #{company_name}
      직무: #{position}
      자기소개서: #{content}
    PROMPT
    
    response = make_api_request(prompt, "합격 예측 전문가", 2500)
    parse_json_response(response)
  end
  
  # 종합 보고서 생성
  def generate_comprehensive_report(analyses, content, company_name, position)
    prompt = <<~PROMPT
      9가지 분석 결과를 종합하여 전략적 개선 방향을 제시해주세요.
      
      **종합 분석 결과:**
      #{analyses.to_json}
      
      **출력 형식:**
      ## 📊 AI 심층분석 종합 보고서
      
      ### 🎯 종합 평가
      - **총점**: [점수]/100
      - **등급**: [S/A/B/C/D]
      - **합격 가능성**: [%]
      - **경쟁력 수준**: 상위 [%]
      
      ### 💪 핵심 강점 TOP 3
      1. [강점1]: [구체적 설명]
      2. [강점2]: [구체적 설명]
      3. [강점3]: [구체적 설명]
      
      ### ⚠️ 개선 필수 사항 TOP 3
      1. [개선점1]: [구체적 방법]
      2. [개선점2]: [구체적 방법]
      3. [개선점3]: [구체적 방법]
      
      ### 🎯 전략적 포지셔닝
      **현재 포지션**: [설명]
      **목표 포지션**: [설명]
      **전환 전략**: [구체적 방법]
      
      ### 📈 개선 로드맵
      **즉시 수정 (1일 이내)**
      - [항목1]
      - [항목2]
      
      **단기 개선 (1주일 이내)**
      - [항목1]
      - [항목2]
      
      **중기 보강 (1개월 이내)**
      - [항목1]
      - [항목2]
      
      ### 💡 차별화 전략
      [구체적인 차별화 방향과 실행 방법]
      
      ### 🎯 최종 제언
      [인사담당자 관점에서 본 핵심 조언]
      
      기업: #{company_name}
      직무: #{position}
    PROMPT
    
    response = make_api_request(prompt, "종합 분석 전문가", 3000)
    parse_response(response)[:content]
  end
  
  # 시각화 데이터 준비
  def prepare_visualization_data(analyses)
    {
      radar_chart: {
        categories: ["직무적합성", "구체성", "논리성", "차별화", "표현력"],
        scores: [
          analyses[:quantitative_score]["categories"]["job_fit"]["score"] * 5,
          analyses[:quantitative_score]["categories"]["specificity"]["score"] * 5,
          analyses[:quantitative_score]["categories"]["logic"]["score"] * 5,
          analyses[:quantitative_score]["categories"]["differentiation"]["score"] * 5,
          analyses[:quantitative_score]["categories"]["expression"]["score"] * 5
        ]
      },
      competency_bars: analyses[:competency_matrix]["competencies"].map do |key, value|
        {
          name: key.to_s.humanize,
          score: value["rating"] * 20
        }
      end,
      risk_pie: {
        red: analyses[:risk_diagnosis]["critical_issues"],
        yellow: analyses[:risk_diagnosis]["minor_issues"],
        green: 10 - analyses[:risk_diagnosis]["critical_issues"] - analyses[:risk_diagnosis]["minor_issues"]
      },
      pass_gauge: analyses[:pass_prediction]["overall_probability"],
      improvement_impact: {
        current: analyses[:pass_prediction]["overall_probability"],
        potential: analyses[:pass_prediction]["improvement_impact"]["if_improved"]
      }
    }
  end
  
  def make_api_request(prompt, role_description, max_tokens = 3000)
    uri = URI(OPENAI_API_URL)
    http = Net::HTTP.new(uri.host, uri.port)
    http.use_ssl = true
    http.read_timeout = 60
    
    request = Net::HTTP::Post.new(uri)
    request['Authorization'] = "Bearer #{@api_key}"
    request['Content-Type'] = 'application/json'
    
    body_params = {
      model: @model,
      messages: [
        {
          role: 'system',
          content: "당신은 #{role_description}입니다. 한국 채용 시장과 기업 문화를 깊이 이해하고 있으며, 데이터 기반의 정확한 분석을 제공합니다."
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: max_tokens
    }
    
    # JSON 응답 형식 지정 (필요한 경우)
    if prompt.include?("JSON")
      body_params[:response_format] = { type: "json_object" }
    end
    
    request.body = body_params.to_json
    
    response = http.request(request)
    JSON.parse(response.body)
  end
  
  def parse_response(response)
    if response['error']
      { error: response['error']['message'] }
    elsif response['choices'] && response['choices'].first
      {
        success: true,
        content: response['choices'].first['message']['content'],
        usage: response['usage']
      }
    else
      { error: '예상치 못한 응답 형식입니다' }
    end
  end
  
  def parse_json_response(response)
    result = parse_response(response)
    return result if result[:error]
    
    begin
      JSON.parse(result[:content])
    rescue JSON::ParserError
      { error: 'JSON 파싱 실패', content: result[:content] }
    end
  end
end