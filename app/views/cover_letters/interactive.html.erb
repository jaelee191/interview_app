<!-- AI Interactive Cover Letter -->
<style>
  @keyframes blink {
    0%, 60%, 100% { opacity: 1; }
    30% { opacity: 0; }
  }
  
  .typing-indicator .dot-1 { animation: blink 1.4s infinite 0.2s; }
  .typing-indicator .dot-2 { animation: blink 1.4s infinite 0.4s; }
  .typing-indicator .dot-3 { animation: blink 1.4s infinite 0.6s; }
  
  #messagesArea::-webkit-scrollbar {
    width: 8px;
  }
  
  #messagesArea::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 10px;
  }
  
  #messagesArea::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 10px;
  }
  
  #messagesArea::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }
  
  /* 메시지 가독성 향상 */
  #messagesArea {
    font-family: 'Pretendard', -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
    background: #fafafa;
  }
  
  /* 메시지 애니메이션 */
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  #messagesArea > div {
    animation: slideIn 0.3s ease-out;
  }
  
  /* 입력 필드 포커스 스타일 */
  #messageInput:focus {
    box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
  }
</style>
<div class="min-h-screen bg-white">
  <!-- Hero Section -->
  <div class="bg-gray-50 border-b border-gray-100 py-16">
    <div class="max-w-4xl mx-auto px-4 text-center">
      <h1 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        AI가 질문하고<br>
        <span class="text-emerald-500">당신이 답하면</span><br>
        자소서가 완성됩니다
      </h1>
      
      <p class="text-lg text-gray-600">
        7단계 맞춤형 질문으로 당신의 숨은 경험을 발굴하고<br>
        진정성 있는 자기소개서로 완성합니다
      </p>
    </div>
  </div>
  
  <div class="max-w-4xl mx-auto px-4 py-12">
    <!-- Start Screen -->
    <div id="startScreen" class="bg-white rounded-lg border border-gray-100 p-8">
      <div class="text-center mb-8">
        <h2 class="text-2xl font-semibold text-gray-900 mb-4">
          AI 코치와 함께 시작하기
        </h2>
        <p class="text-gray-600">먼저 기본 정보를 알려주세요</p>
      </div>
      
      <div class="space-y-4 max-w-lg mx-auto">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            지원 기업 <span class="text-red-500">*</span>
          </label>
          <input type="text" 
                 id="companyName" 
                 placeholder="예: 삼성전자, 네이버, 카카오"
                 class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-2">
            지원 직무 <span class="text-red-500">*</span>
          </label>
          <input type="text" 
                 id="position" 
                 placeholder="예: 소프트웨어 개발자, 마케팅 매니저"
                 class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
        </div>
        
        <button id="startChat" 
                class="w-full bg-emerald-500 hover:bg-emerald-600 text-white font-medium py-3 rounded-full transition-colors">
          AI 코칭 시작하기
        </button>
      </div>
    </div>
      
    <!-- Chat Interface -->
    <div id="chatInterface" class="hidden">
      <!-- Chat Container -->
      <div class="bg-white rounded-lg border border-gray-100 mb-6">
        <!-- Chat Header -->
        <div class="border-b border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="font-semibold text-gray-900">jachui 코치</h3>
              <p class="text-sm text-gray-500">당신의 이야기를 발굴하는 AI</p>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-2 h-2 bg-emerald-500 rounded-full"></div>
              <span class="text-sm text-gray-600">온라인</span>
            </div>
          </div>
        </div>
        
        <!-- Messages Area -->
        <div id="messagesArea" class="p-6 min-h-[400px] max-h-[500px] overflow-y-auto">
          <!-- Messages will appear here -->
        </div>
        
        <!-- Input Area -->
        <div class="border-t border-gray-100 p-6 bg-white">
          <div class="flex gap-3">
            <input type="text" 
                   id="messageInput" 
                   placeholder="여기에 답변을 입력하세요..."
                   class="flex-1 px-5 py-3.5 text-base border border-gray-200 rounded-xl focus:ring-2 focus:ring-emerald-500 focus:border-transparent placeholder-gray-400"
                   disabled>
            <button id="sendMessage" 
                    class="px-8 py-3.5 bg-emerald-500 hover:bg-emerald-600 text-white font-medium rounded-xl transition-all hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed text-base"
                    disabled>
              전송
            </button>
          </div>
        </div>
      </div>
      
      <!-- Progress and Quality Indicators -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <!-- Progress Indicator -->
        <div class="bg-white rounded-lg border border-gray-100 p-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-gray-700">진행률</span>
            <span id="progressText" class="text-sm text-gray-500">0/7 단계</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div id="progressBar" class="bg-emerald-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
          </div>
        </div>
        
        <!-- Quality Score Indicator -->
        <div id="qualityIndicator" class="bg-white rounded-lg border border-gray-100 p-4 hidden">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-gray-700">답변 품질</span>
            <span id="qualityScore" class="text-sm font-bold text-emerald-600">0점</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div id="qualityBar" class="bg-emerald-500 h-2 rounded-full transition-all duration-500" style="width: 0%"></div>
          </div>
          <div id="qualityTips" class="mt-2 text-xs text-gray-600 hidden">
            <!-- Tips will be added here -->
          </div>
        </div>
      </div>
      
      <!-- Final Result -->
      <div id="finalResult" class="hidden bg-white rounded-lg border border-gray-100 p-8">
        <div class="text-center mb-6">
          <h3 class="text-2xl font-semibold text-gray-900 mb-2">자소서 완성!</h3>
          <p class="text-gray-600">당신만의 진정성 있는 자기소개서가 완성되었습니다</p>
        </div>
        
        <div id="generatedCoverLetter" class="bg-gray-50 rounded-lg p-6 mb-6 text-gray-700">
          <!-- Generated content will appear here -->
        </div>
        
        <div class="flex flex-col sm:flex-row gap-3">
          <button id="downloadBtn" 
                  class="px-6 py-2.5 bg-gray-900 hover:bg-gray-800 text-white font-medium rounded-full transition-colors text-sm">
            다운로드
          </button>
          
          <button id="copyBtn" 
                  class="px-6 py-2.5 bg-emerald-500 hover:bg-emerald-600 text-white font-medium rounded-full transition-colors text-sm">
            복사하기
          </button>
          
          <a href="/cover_letters/advanced" 
             class="px-6 py-2.5 bg-white border border-gray-200 text-gray-700 font-medium rounded-full hover:bg-gray-50 transition-colors text-sm text-center">
            심층 분석받기
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const startScreen = document.getElementById('startScreen');
  const chatInterface = document.getElementById('chatInterface');
  const startChatBtn = document.getElementById('startChat');
  const messagesArea = document.getElementById('messagesArea');
  const messageInput = document.getElementById('messageInput');
  const sendBtn = document.getElementById('sendMessage');
  const progressBar = document.getElementById('progressBar');
  const progressText = document.getElementById('progressText');
  const finalResult = document.getElementById('finalResult');
  
  let currentStep = 0;
  let conversationData = {};
  let chatSession = null;
  
  const steps = [
    '기본 정보', '핵심 경험', '성과 구체화', '도전과 극복', 
    '성장과 학습', '지원 동기', '미래 비전'
  ];
  
  startChatBtn.addEventListener('click', function() {
    const company = document.getElementById('companyName').value.trim();
    const position = document.getElementById('position').value.trim();
    
    if (!company || !position) {
      alert('지원 기업과 직무를 모두 입력해주세요.');
      return;
    }
    
    conversationData.company = company;
    conversationData.position = position;
    
    // Hide start screen, show chat
    startScreen.classList.add('hidden');
    chatInterface.classList.remove('hidden');
    
    // Start conversation
    startInteractiveSession();
  });
  
  function startInteractiveSession() {
    console.log('Starting interactive session with:', conversationData);
    
    // Show loading state
    addMessage('ai', '대화를 준비하고 있습니다...');
    
    fetch('/cover_letters/start_interactive', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({
        company_name: conversationData.company,
        position: conversationData.position
      })
    })
    .then(response => {
      console.log('Response status:', response.status);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Response data:', data);
      if (data.success) {
        // Clear loading message
        messagesArea.innerHTML = '';
        
        chatSession = data.session_id || data.current_step;
        addMessage('ai', data.message || data.first_question || '안녕하세요! 자소서 작성을 도와드리겠습니다.');
        enableInput();
        updateProgress();
      } else {
        throw new Error(data.error || '세션 시작 실패');
      }
    })
    .catch(error => {
      console.error('Error starting session:', error);
      alert(`오류가 발생했습니다: ${error.message}`);
      // Re-show start screen on error
      startScreen.classList.remove('hidden');
      chatInterface.classList.add('hidden');
    });
  }
  
  function addMessage(sender, content) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex ${sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`;
    
    const messageContent = `
      <div class="${sender === 'user' 
        ? 'bg-emerald-500 text-white' 
        : 'bg-gray-50 text-gray-900 border border-gray-200'} 
        max-w-lg px-5 py-4 rounded-2xl shadow-sm">
        <div class="text-base leading-relaxed whitespace-pre-wrap">${content}</div>
      </div>
    `;
    
    messageDiv.innerHTML = messageContent;
    messagesArea.appendChild(messageDiv);
    messagesArea.scrollTop = messagesArea.scrollHeight;
  }
  
  function enableInput() {
    messageInput.disabled = false;
    sendBtn.disabled = false;
    messageInput.focus();
  }
  
  function disableInput() {
    messageInput.disabled = true;
    sendBtn.disabled = true;
  }
  
  function updateProgress() {
    currentStep++;
    const percentage = (currentStep / steps.length) * 100;
    progressBar.style.width = percentage + '%';
    progressText.textContent = `${currentStep}/${steps.length} 단계`;
  }
  
  sendBtn.addEventListener('click', sendMessage);
  messageInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  });
  
  function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    
    console.log('Sending message:', message);
    
    // Add user message
    addMessage('user', message);
    messageInput.value = '';
    disableInput();
    
    // Show typing indicator
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'flex justify-start typing-indicator mb-4';
    typingIndicator.innerHTML = `
      <div class="bg-gray-50 text-gray-600 border border-gray-200 px-5 py-4 rounded-2xl shadow-sm max-w-[120px]">
        <span class="inline-block text-base">작성 중</span>
        <span class="inline-block ml-1 text-base">
          <span class="dot-1">.</span>
          <span class="dot-2">.</span>
          <span class="dot-3">.</span>
        </span>
      </div>
    `;
    messagesArea.appendChild(typingIndicator);
    messagesArea.scrollTop = messagesArea.scrollHeight;
    
    // Send to server
    fetch('/cover_letters/send_message', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('[name="csrf-token"]').content
      },
      body: JSON.stringify({
        session_id: chatSession,
        message: message
      })
    })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log('Response:', data);
      
      // Remove typing indicator
      const indicator = messagesArea.querySelector('.typing-indicator');
      if (indicator) indicator.remove();
      
      if (data.success) {
        // Add AI response
        addMessage('ai', data.ai_response || data.message || '응답을 받았습니다.');
        
        // Update progress
        updateProgress();
        
        // Update quality analysis if available
        if (data.quality_analysis) {
          updateQualityIndicator(data.quality_analysis);
        }
        
        // Check if completed
        if (data.completed || data.final_content) {
          showFinalResult(data.final_content || data.cover_letter);
        } else {
          enableInput();
        }
      } else {
        throw new Error(data.error || '메시지 전송 실패');
      }
    })
    .catch(error => {
      console.error('Error sending message:', error);
      
      // Remove typing indicator
      const indicator = messagesArea.querySelector('.typing-indicator');
      if (indicator) indicator.remove();
      
      addMessage('ai', '죄송합니다. 오류가 발생했습니다. 다시 시도해주세요.');
      enableInput();
    });
  }
  
  function updateQualityIndicator(analysis) {
    const qualityIndicator = document.getElementById('qualityIndicator');
    const qualityScore = document.getElementById('qualityScore');
    const qualityBar = document.getElementById('qualityBar');
    const qualityTips = document.getElementById('qualityTips');
    
    if (!analysis) return;
    
    // Show quality indicator
    qualityIndicator.classList.remove('hidden');
    
    // Update score
    let score = 0;
    if (analysis.quality_score && analysis.quality_score.overall) {
      score = Math.round(analysis.quality_score.overall);
    }
    
    qualityScore.textContent = `${score}점`;
    qualityBar.style.width = `${score}%`;
    
    // Update bar color based on score
    if (score < 60) {
      qualityBar.className = 'bg-red-500 h-2 rounded-full transition-all duration-500';
      qualityScore.className = 'text-sm font-bold text-red-600';
    } else if (score < 80) {
      qualityBar.className = 'bg-yellow-500 h-2 rounded-full transition-all duration-500';
      qualityScore.className = 'text-sm font-bold text-yellow-600';
    } else {
      qualityBar.className = 'bg-emerald-500 h-2 rounded-full transition-all duration-500';
      qualityScore.className = 'text-sm font-bold text-emerald-600';
    }
    
    // Show improvement tips if available
    if (analysis.improvement_tips && analysis.improvement_tips.length > 0) {
      qualityTips.classList.remove('hidden');
      qualityTips.innerHTML = analysis.improvement_tips
        .slice(0, 2) // Show max 2 tips
        .map(tip => `<div class="mb-1">${tip}</div>`)
        .join('');
    } else {
      qualityTips.classList.add('hidden');
    }
  }
  
  function showFinalResult(coverLetter) {
    finalResult.classList.remove('hidden');
    document.getElementById('generatedCoverLetter').innerHTML = coverLetter;
    finalResult.scrollIntoView({ behavior: 'smooth' });
  }
  
  // Copy and download functionality
  document.getElementById('copyBtn')?.addEventListener('click', function() {
    const content = document.getElementById('generatedCoverLetter').textContent;
    navigator.clipboard.writeText(content).then(() => {
      this.textContent = '복사 완료!';
      setTimeout(() => {
        this.textContent = '복사하기';
      }, 2000);
    });
  });
});
</script>